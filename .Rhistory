ansMat=matrix(NA,length(Y),iter)
for(i in seq(iter)){
#get train
train=sample(seq(length(Y)),0.5*length(Y))
if(min(table(Y[train]))==0)
next
#test from train
test=seq(length(Y))[-train]
#train model
XX=X[train,]
YY=Y[train]
mod=svm(XX,YY,probability=FALSE)
XXX=X[test,]
predVec=predict(mod,XXX)
RFans=attr(predVec,'decision.values')
ansMat[test,i]=as.numeric(predVec)
}
ans=rowMeans(ansMat,na.rm=TRUE)
r=roc(Y,ans)$auc
#print(r)
out[[j]] = r
}
(mean(unlist(out)))
set.seed(42)
Y=as.factor(rep(c(1,2), times=14))
X=matrix(runif(length(Y)*100), nrow=length(Y))
library(e1071)
library(pROC)
out = list()
for (j in seq(100)) {
colnames(X)=1:ncol(X)
iter=1
ansMat=matrix(NA,length(Y),iter)
for(i in seq(iter)){
#get train
train=sample(seq(length(Y)),0.5*length(Y))
if(min(table(Y[train]))==0)
next
#test from train
test=seq(length(Y))[-train]
#train model
XX=X[train,]
YY=Y[train]
mod=svm(XX,YY,probability=FALSE)
XXX=X[test,]
predVec=predict(mod,XXX)
RFans=attr(predVec,'decision.values')
ansMat[test,i]=as.numeric(predVec)
}
ans=rowMeans(ansMat,na.rm=TRUE)
r=roc(Y,ans)$auc
#print(r)
out[[j]] = r
}
(mean(unlist(out)))
set.seed(42)
Y=as.factor(rep(c(1,2), times=14))
X=matrix(runif(length(Y)*100), nrow=length(Y))
library(e1071)
library(pROC)
out = list()
for (j in seq(100)) {
colnames(X)=1:ncol(X)
iter=1
ansMat=matrix(NA,length(Y),iter)
for(i in seq(iter)){
#get train
train=sample(seq(length(Y)),0.5*length(Y))
if(min(table(Y[train]))==0)
next
#test from train
test=seq(length(Y))[-train]
#train model
XX=X[train,]
YY=Y[train]
mod=svm(XX,YY,probability=FALSE)
XXX=X[test,]
predVec=predict(mod,XXX)
RFans=attr(predVec,'decision.values')
ansMat[test,i]=as.numeric(predVec)
}
ans=rowMeans(ansMat,na.rm=TRUE)
r=roc(Y,ans)$auc
#print(r)
out[[j]] = r
}
(mean(unlist(out)))
set.seed(42)
Y=as.factor(rep(c(1,2), times=14))
X=matrix(runif(length(Y)*100), nrow=length(Y))
library(e1071)
library(pROC)
out = list()
for (j in seq(100)) {
colnames(X)=1:ncol(X)
iter=10
ansMat=matrix(NA,length(Y),iter)
for(i in seq(iter)){
#get train
train=sample(seq(length(Y)),0.5*length(Y))
if(min(table(Y[train]))==0)
next
#test from train
test=seq(length(Y))[-train]
#train model
XX=X[train,]
YY=Y[train]
mod=svm(XX,YY,probability=FALSE)
XXX=X[test,]
predVec=predict(mod,XXX)
RFans=attr(predVec,'decision.values')
ansMat[test,i]=as.numeric(predVec)
}
ans=rowMeans(ansMat,na.rm=TRUE)
r=roc(Y,ans)$auc
#print(r)
out[[j]] = r
}
(mean(unlist(out)))
set.seed(42)
Y=as.factor(rep(c(1,2), times=14))
X=matrix(runif(length(Y)*100), nrow=length(Y))
library(e1071)
library(pROC)
out = list()
for (j in seq(100)) {
colnames(X)=1:ncol(X)
iter=10
ansMat=matrix(NA,length(Y),iter)
for(i in seq(iter)){
#get train
train=sample(seq(length(Y)),0.25*length(Y))
if(min(table(Y[train]))==0)
next
#test from train
test=seq(length(Y))[-train]
#train model
XX=X[train,]
YY=Y[train]
mod=svm(XX,YY,probability=FALSE)
XXX=X[test,]
predVec=predict(mod,XXX)
RFans=attr(predVec,'decision.values')
ansMat[test,i]=as.numeric(predVec)
}
ans=rowMeans(ansMat,na.rm=TRUE)
r=roc(Y,ans)$auc
#print(r)
out[[j]] = r
}
(mean(unlist(out)))
set.seed(42)
library(e1071)
library(pROC)
out = list()
for (j in seq(100)) {
Y=as.factor(rep(c(1,2), times=14))
X=matrix(runif(length(Y)*100), nrow=length(Y))
colnames(X)=1:ncol(X)
iter=10
ansMat=matrix(NA,length(Y),iter)
for(i in seq(iter)){
#get train
train=sample(seq(length(Y)),0.5*length(Y))
if(min(table(Y[train]))==0)
next
#test from train
test=seq(length(Y))[-train]
#train model
XX=X[train,]
YY=Y[train]
mod=svm(XX,YY,probability=FALSE)
XXX=X[test,]
predVec=predict(mod,XXX)
RFans=attr(predVec,'decision.values')
ansMat[test,i]=as.numeric(predVec)
}
ans=rowMeans(ansMat,na.rm=TRUE)
r=roc(Y,ans)$auc
#print(r)
out[[j]] = r
}
(mean(unlist(out)))
set.seed(42)
library(e1071)
library(pROC)
out = list()
for (j in seq(100)) {
Y=as.factor(rep(c(1,2), times=14))
X=matrix(runif(length(Y)*100), nrow=length(Y))
colnames(X)=1:ncol(X)
iter=2
ansMat=matrix(NA,length(Y),iter)
for(i in seq(iter)){
#get train
train=sample(seq(length(Y)),0.5*length(Y))
if(min(table(Y[train]))==0)
next
#test from train
test=seq(length(Y))[-train]
#train model
XX=X[train,]
YY=Y[train]
mod=svm(XX,YY,probability=FALSE)
XXX=X[test,]
predVec=predict(mod,XXX)
RFans=attr(predVec,'decision.values')
ansMat[test,i]=as.numeric(predVec)
}
ans=rowMeans(ansMat,na.rm=TRUE)
r=roc(Y,ans)$auc
#print(r)
out[[j]] = r
}
(mean(unlist(out)))
roll <- function(tokens, vgl){tt = round(tokens/10); any(sample(1:tt, TRUE, 3)==vgl)}
roll(100)
roll <- function(tokens, vgl){tt = round(tokens/10); any(sample(1:tt, 3, TRUE)==vgl)}
roll(100)
roll <- function(tokens, vgl){tt = round(tokens/10); any(sample(1:tt, 3, TRUE)==c(vgl))}
roll(100)
roll <- function(tokens, vgl=7){tt = round(tokens/10); any(sample(1:tt, 3, TRUE)==c(vgl))}
roll(100)
roll(250)
roll(375)
roll(375)
roll(375)
roll(375)
roll(200)
roll(250)
roll(440)
roll(399)
roll(275)
roll(330)
roll(330)
roll(300)
roll(230)
roll(300)
roll(330)
roll(280)
roll(330)
roll <- function(tokens, rolls=1, vgl=7){tt <- round(tokens/10); tt <- sample(1:tt, rolls, TRUE); print(tt); any(tt == vgl)}
roll(100)
roll(175)
roll(440)
roll(414)
roll(230)
roll(400)
roll(399)
roll(250)
roll(250)
roll(250)
roll(375)
roll(400)
roll(199)
roll(370)
roll(330)
roll(330)
roll(230)
quit()
roll(370)
roll(175)
roll(440)
roll(330)
roll(230)
roll(370)
roll(330)
roll(399)
roll(250)
roll(250)
roll(375)
roll(400)
roll(199)
roll(300)
quit()
library(readxl)
jmeDataPublic <- read_excel("Downloads/dataverse_files/jmeDataPublic.xlsx")
View(jmeDataPublic)
jmeDataPublic(jmeDataPublic$allianceOrg=='NATO')
jmeDataPublic[jmeDataPublic$allianceOrg=='NATO', ]
test = jmeDataPublic[jmeDataPublic$allianceOrg=='NATO', ]
summary(test)
summary(jmeDataPublic$allianceOrg)
levels(jmeDataPublic$allianceOrg)
(jmeDataPublic$allianceOrg)
plot(test$allianceOrg)
hist(test$allianceOrg)
test$startYear
test_test = subset(jmeDataPublic, select = c('allianceOrg', 'startYear'))
test_test
plot(test_test$startYear, test_test$allianceOrg)
plot(test_test$startYear)
summary(test_test)
event_counts = table(test)
event_counts = table(test$startYear)
cumulative_events = cumsum(event_counts)
plot(names(cumulative_events), cumulative_events, type = "o", col = "blue",
xlab = "Jahr", ylab = "Kumulative Anzahl von Ereignissen",
main = "Kumulativer Anstieg der Ereignisse über die Jahre")
plot(names(cumulative_events), cumulative_events, type = "o", col = "blue",
xlab = "Year", ylab = "Cumulative number of training exercises",
main = "Cumulative Increase of Training Exercises over the Years")
library(readxl)
jmeDataPublic <- read_excel("Downloads/dataverse_files/jmeDataPublic.xlsx")
nato_subset = jmeDataPublic[jmeDataPublic$allianceOrg=='NATO', ]
nato_subset
# Benötigte Bibliothek laden
library(ggplot2)
# Beispiel-Datensatz erstellen
data <- data.frame(
year = c(2010, 2011, 2011, 2012, 2012, 2012, 2013, 2014, 2015, 2015)
)
# Ereignisse pro Jahr zählen
event_counts <- as.data.frame(table(data$year))
colnames(event_counts) <- c("year", "count")
# Kumulative Summe der Ereignisse berechnen
event_counts$cumulative_count <- cumsum(event_counts$count)
# Sicherstellen, dass Jahr als numerische Variable behandelt wird
event_counts$year <- as.numeric(as.character(event_counts$year))
# ggplot Graph erstellen
ggplot(event_counts, aes(x = year, y = cumulative_count)) +
geom_line(color = "blue", size = 1) +   # Linie zeichnen
geom_point(color = "red", size = 3) +   # Punkte zeichnen
labs(title = "Kumulativer Anstieg der Ereignisse über die Jahre",
x = "Jahr", y = "Kumulative Anzahl von Ereignissen") +  # Titel und Achsenbeschriftungen
theme_minimal() +                       # Minimaler Hintergrundstil
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Zentrierter Titel
axis.text = element_text(size = 12),                              # Achsenbeschriftungen
axis.title = element_text(size = 14)                              # Achsentitel
)
library(readxl)
jmeDataPublic <- read_excel("Downloads/dataverse_files/jmeDataPublic.xlsx")
View(nato_subset)
View(jmeDataPublic)
library(readxl)
jmeDataPublic <- read_excel("Downloads/dataverse_files/jmeDataPublic.xlsx")
nato_subset = jmeDataPublic[jmeDataPublic$allianceOrg=='NATO', ]
event_counts = table(nato_subset$startYear)
event_counts
event_counts = len(nato_subset$startYear)
event_counts
event_counts = length(nato_subset$startYear)
event_counts
library(readxl)
jmeDataPublic <- read_excel("Downloads/dataverse_files/jmeDataPublic.xlsx")
nato_subset = jmeDataPublic[jmeDataPublic$allianceOrg=='NATO', ]
event_counts = table(nato_subset$startYear)
event_counts
cumulative_events = cumsum(event_counts)
barplot(cumulative_events)
event_counts
barplot(event_counts)
library(readxl)
jmeDataPublic <- read_excel("Downloads/dataverse_files/jmeDataPublic.xlsx")
nato_subset = jmeDataPublic[jmeDataPublic$allianceOrg=='NATO', ]
unique(nato_subset)
nato_subset
library(readxl)
jmeDataPublic <- read_excel("Downloads/dataverse_files/jmeDataPublic.xlsx")
nato_subset = jmeDataPublic[jmeDataPublic$allianceOrg=='NATO', ]
nato_subset_unique = unique(nato_subset)
event_counts = table(nato_subset_unique$startYear)
cumulative_events = cumsum(event_counts)
barplot(cumulative_events)
plot(names(cumulative_events), cumulative_events, type = "o", col = "blue",
xlab = "Year", ylab = "Cumulative number of training exercises",
main = "Cumulative Increase of Training Exercises over the Years")
library(readxl)
jmeDataPublic <- read_excel("Downloads/dataverse_files/jmeDataPublic.xlsx")
nato_subset = jmeDataPublic[jmeDataPublic$allianceOrg=='NATO', ]
nato_subset_unique = unique(nato_subset)
event_counts = table(nato_subset_unique$xID)
cumulative_events = cumsum(event_counts)
barplot(cumulative_events)
plot(names(cumulative_events), cumulative_events, type = "o", col = "blue",
xlab = "Year", ylab = "Cumulative number of training exercises",
main = "Cumulative Increase of Training Exercises over the Years")
cumulative_events
plot(y = cumsum(nato_subset_unique$xID), x = nato_subset_unique$startYear)
nato_subset
jmeDataPublic[jmeDataPublic$allianceOrg=='NATO']
jmeDataPublic[jmeDataPublic$allianceOrg=='NATO', ]
jmeDataPublic[, jmeDataPublic$allianceOrg=='NATO']
jmeDataPublic[jmeDataPublic$allianceOrg=='NATO']
jmeDataPublic$allianceOrg=='NATO'
length(jmeDataPublic)
length(jmeDataPublic$xID)
library(readxl)
jmeDataPublic <- read_excel("Downloads/dataverse_files/jmeDataPublic.xlsx")
library(readxl)
jmeDataPublic <- read_excel("Downloads/dataverse_files/jmeDataPublic.xlsx")
subset(jmeDataPublic, allianceOrg == 'NATO')
library(readxl)
jmeDataPublic <- read_excel("Downloads/dataverse_files/jmeDataPublic.xlsx")
nato_subset <- subset(jmeDataPublic, allianceOrg == 'NATO')
nato_subset
unique(nato_subset)
unique(nato_subset$xID)
length(unique(nato_subset$xID))
library(readxl)
jmeDataPublic <- read_excel("Downloads/dataverse_files/jmeDataPublic.xlsx")
nato_subset <- subset(jmeDataPublic, allianceOrg == 'NATO')
nato_subset <- nato_subset[(unique(nato_subset$xID)), ]
nato_subset
nato_subset <- nato_subset[(unique(nato_subset$primaryName)), ]
length(unique(nato_subset$primaryName))
jmeDataPublic <- read_excel("Downloads/dataverse_files/jmeDataPublic.xlsx")
nato_subset <- subset(jmeDataPublic, allianceOrg == 'NATO')
length(unique(nato_subset$primaryName))
library(readxl)
jmeDataPublic <- read_excel("Downloads/dataverse_files/jmeDataPublic.xlsx")
nato_subset <- subset(jmeDataPublic, allianceOrg == 'NATO')
nato_subset <- nato_subset[length(unique(nato_subset$primaryName)), ]
nato_subset
library(readxl)
jmeDataPublic <- read_excel("Downloads/dataverse_files/jmeDataPublic.xlsx")
nato_subset <- subset(jmeDataPublic, allianceOrg == 'NATO')
nato_subset
summary(nato_subset)
unique(nato_subset$xID)
library(readxl)
library(dplyr)
jmeDataPublic <- read_excel("Downloads/dataverse_files/jmeDataPublic.xlsx")
nato_subset <- subset(jmeDataPublic, allianceOrg == 'NATO')
first_entries <- nato_subset %>%
group_by(xID) %>%
slice(1) %>%  # Nimmt den ersten Eintrag jeder Gruppe
ungroup()     # Gruppierung aufheben
first_entries
cumsum(first_entries$xID)
plot(nato_subset)
plot(nato_subset$endYear)
plot(x = nato_subset$endYear)
plot(x = nato_subset$endYear)
plot(y = nato_subset$xID,x = nato_subset$endYear)
barplot(y = nato_subset$xID,x = nato_subset$endYear)
barplot(y = nato_subset$xID,x = nato_subset$endYear)
hist(y = nato_subset$xID, x = nato_subset$endYear)
plot(y = nato_subset$xID, x = nato_subset$endYear)
library(readxl)
library(dplyr)
jmeDataPublic <- read_excel("Downloads/dataverse_files/jmeDataPublic.xlsx")
nato_subset <- subset(jmeDataPublic, allianceOrg == 'NATO')
nato_subset <- nato_subset %>%
group_by(xID) %>%
slice(1) %>%  # Nimmt den ersten Eintrag jeder Gruppe
ungroup()     # Gruppierung aufheben
unique_id_count <- nato_subset %>%
group_by(endYear) %>%
summarise(unique_ids = n_distinct(xID))
ggplot(unique_id_count, aes(x = year, y = unique_ids)) +
geom_bar(stat = "identity", fill = "blue") +  # Balken zeichnen
labs(title = "Anzahl der einzigartigen IDs pro Jahr", x = "Jahr", y = "Anzahl einzigartiger IDs") +
theme_minimal() +  # Minimalistisches Design
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14)
)
library(ggplot2)
jmeDataPublic <- read_excel("Downloads/dataverse_files/jmeDataPublic.xlsx")
nato_subset <- subset(jmeDataPublic, allianceOrg == 'NATO')
nato_subset <- nato_subset %>%
group_by(xID) %>%
slice(1) %>%  # Nimmt den ersten Eintrag jeder Gruppe
ungroup()     # Gruppierung aufheben
unique_id_count <- nato_subset %>%
group_by(endYear) %>%
summarise(unique_ids = n_distinct(xID))
ggplot(unique_id_count, aes(x = year, y = unique_ids)) +
geom_bar(stat = "identity", fill = "blue") +  # Balken zeichnen
labs(title = "Anzahl der einzigartigen IDs pro Jahr", x = "Jahr", y = "Anzahl einzigartiger IDs") +
theme_minimal() +  # Minimalistisches Design
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14)
)
unique_id_count <- nato_subset %>%
group_by(endYear) %>%
summarise(unique_ids = n_distinct(xID))
ggplot(unique_id_count, aes(x = endYear, y = unique_ids)) +
geom_bar(stat = "identity", fill = "blue") +  # Balken zeichnen
labs(title = "Anzahl der einzigartigen IDs pro Jahr", x = "Jahr", y = "Anzahl einzigartiger IDs") +
theme_minimal() +  # Minimalistisches Design
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14)
)
ggplot(unique_id_count, aes(x = endYear, y = unique_ids)) +
geom_bar(stat = "identity", fill = "blue") +  # Balken zeichnen
labs(title = "Number of unique xIDs per Year", x = "Year", y = "Number of unique xIDs") +
theme_minimal() +  # Minimalistisches Design
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14)
)
devtools::install_github("RMKruse/bivquant-discriminant-package")
devtools::install_github("RMKruse/bivquant")
devtools::install_github("RMKruse/bivarte-discriminant-package")
days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
days = list('monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday')
length(days)
1:7
rbinom(n = 1, size = 1, prob = coin_prob)
rbinom(n = 1, size = 1, prob = 0.5)
rbinom(n = 1, size = 1, prob = 0.5)
rbinom(n = 1, size = 1, prob = 0.5)
setwd("~/Git/BRPL")
